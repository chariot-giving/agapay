generator client {
  provider = "prisma-client-js"
  output   = "./dist"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./prisma/ERD.md"
  title    = "Chariot Payments"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user is a table to store the users of the API
// users are the payers and the callers of the API
model user {
  // the unique identifier for the user
  id              BigInt            @id @default(autoincrement()) @db.BigInt
  // the user's email address
  email           String            @unique @db.VarChar(255)
  idempotency_key idempotency_key[]
  audit_record    audit_record[]
  account         account[]
  payment         payment[]
  transfer        transfer[]
  payment_intent  payment_intent[]
}

// idemporancy_key is a table to store the idempotency keys for the API
model idempotency_key {
  // the unique identifier for the idempotency key
  id          BigInt    @id @default(autoincrement()) @db.BigInt
  // the user-specified idempotency key
  // server defaults to a UUID if not provided
  key         String    @unique @db.VarChar(255)
  last_run_at DateTime  @default(now()) @db.Timestamptz(6)
  // time that indicates if the idempotency key is actively being worked
  // if a request with a key is being processed by the server then the key is locked
  locked_at   DateTime? @default(now()) @db.Timestamptz(6)

  // parameters of the incoming request
  request_method String @db.VarChar(10)
  request_path   String @db.VarChar(255)
  request_params Json?  @db.JsonB
  request_body   Json?  @db.JsonB

  // for finished requests, stored status code and body
  response_code Int?  @db.Integer
  response_body Json? @db.JsonB

  // label for the last atomic phase completed for the idempotent request
  // initial value is "started" and final value is "finished"
  recovery_point String     @db.VarChar(255)
  // the identifier of the user that created the idempotency key
  // this can be an api key or a user id
  user_id        BigInt     @db.BigInt
  user           user       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_idempotency_key_user")
  account        account[]
  payment        payment[]
  transfer       transfer[]

  @@index([user_id, key], map: "idx_idempotency_keys_user_id_key")
}

// audit_record is a table to store audit records that can help us piece
// together the events as part of a request.
model audit_record {
  // the unique identifier for the audit record
  id            BigInt   @id @default(autoincrement()) @db.BigInt
  // the action taken
  action        String   @db.VarChar(50)
  // the data associated with the action
  data          Json     @db.JsonB
  // the ip address of the originator of the request
  origin_ip     String   @db.VarChar(50)
  // the resource type
  resource_type String   @db.VarChar(50)
  // the identifier of the resource that was acted upon
  resource_id   BigInt   @db.BigInt
  // the time the action was taken
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  // the identifier of the user that is associated with the action
  user_id       BigInt   @db.BigInt
  user          user     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_audit_record_user")
}

// An Account represents a financial account used to move money.
// The account is setup in the "For-Benefit-Of" (FBO) model where the account is owned and maintained by Chariot.
// An account is necessary in order to make and send payments to nonprofits.
model account {
  // The unique ID for the account
  id                     BigInt           @id @default(autoincrement()) @db.BigInt
  // the name of the account
  name                   String           @db.VarChar(255)
  // The ID of the bank account for a given provider
  // null until the bank account is created
  bank_account_id        String?          @unique @db.VarChar(255)
  // The ID of the bank account number
  // The Account Number corresponds to an actual Bank Account and ABA Routing number
  // null until the bank account number is created
  bank_account_number_id String?          @unique @db.VarChar(255)
  // the time the account was created
  created_at             DateTime         @default(now()) @db.Timestamptz(6)
  // store a reference to the idempotency key so that we can recover an already created account
  // idempotency keys are not stored permanently so this gets set to NULL when a referenced key is deleted
  idempotency_key_id     BigInt?          @db.BigInt
  idempotency_key        idempotency_key? @relation(fields: [idempotency_key_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_account_idempotency_key")
  // the identifier of the user that created the account
  user_id                BigInt           @db.BigInt
  user                   user             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_account_user")
  payment                payment[]
  transfer               transfer[]

  @@unique([user_id, idempotency_key_id], map: "idx_account_user_id_idempotency_key_id")
  @@index([idempotency_key_id], map: "idx_account_idempotency_key_id")
}

// Organization represents a nonprofit organization or fiscal sponsor that can receive and distribute funds
model organization {
  // The unique identifier of the organization
  id             String      @id @db.VarChar(255)
  // The official name of the organization on legal documents 
  legal_name     String      @db.VarChar(255)
  // The name that the organization uses to interface with the public
  preferred_name String?     @db.VarChar(255)
  // The 9 digit Employer Identification Number issued by the IRS
  ein            String      @unique @db.VarChar(9)
  // the identifier of the physical address for the organization
  address_id     BigInt      @db.BigInt
  address        address     @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_organization_address")
  recipient      recipient[]
}

// Recipient represents a recipient unit that may or may not be a registered 501(c)(3) charity
// If the recipient is not a 501(c)(3) charity and does not have their own unique EIN
// then a parent fiscal sponsor can setup multiple recipients to ensure payments are
// routed correctly at the time of payment.
model recipient {
  // The unique identifier of the recipient
  id                 String           @id @default(uuid()) @db.Uuid
  // The name of the recipient
  name               String           @db.VarChar(255)
  // a flag to indicate if the recipient is a primary recipient for an organization
  // there should only ever be one primary recipient for any organization
  primary            Boolean          @default(false)
  // the identifier of the organization for this recipient
  organization_id    String           @db.VarChar(255)
  organization       organization     @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_recipient_organization")
  // the identifier of the bank address for the recipient
  bank_address_id    BigInt           @db.BigInt
  bankAddress        bank_address     @relation(fields: [bank_address_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_recipient_bank_address")
  // the identifier of the mailing address for the recipient
  mailing_address_id BigInt           @db.BigInt
  mailingAddress     address          @relation(fields: [mailing_address_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_recipient_mailing_address")
  // the time the recipient was created
  created_at         DateTime         @default(now()) @db.Timestamptz(6)
  payment            payment[]
  payment_intent     payment_intent[]

  @@index([organization_id], map: "idx_recipient_organization_id")
}

// payment represents a payment from an account to a recipient
model payment {
  // the unique identifier for the payment
  id                 BigInt           @id @default(autoincrement()) @db.BigInt
  // the amount of the payment in USD cents
  amount             BigInt           @db.BigInt
  // description of the payment
  description        String           @db.VarChar(400)
  // the payment rail used to send the payment
  payment_rail       payment_rail
  // identifier of the bank transfer
  // null until the bank transfer is created
  bank_transfer_id   String?          @db.VarChar(255)
  // the identifier of the account that originated this payment
  account_id         BigInt           @db.BigInt
  account            account          @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_payment_account")
  // the identifier of the recipient of the payment
  recipient_id       String           @db.Uuid
  recipient          recipient        @relation(fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_payment_recipient")
  // the identifier of the chariot initiated grant for reconciliation purposes
  chariot_id         String?          @db.VarChar(255)
  // store a reference to the idempotency key so that we can recover an already created payment
  // idempotency keys are not stored permanently so this gets set to NULL when a referenced key is deleted
  idempotency_key_id BigInt?          @db.BigInt
  idempotency_key    idempotency_key? @relation(fields: [idempotency_key_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_payment_idempotency_key")
  // the identifier of the user that created the payment
  user_id            BigInt           @db.BigInt
  user               user             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_payment_user")
  // the time the payment was created
  created_at         DateTime         @default(now()) @db.Timestamptz(6)

  @@unique([user_id, idempotency_key_id], map: "idx_payment_user_id_idempotency_key_id")
  @@index([idempotency_key_id], map: "idx_payment_idempotency_key_id")
  @@index([account_id], map: "idx_payment_account_id")
  @@index([chariot_id], map: "idx_payment_chariot_id")
  @@index([account_id, recipient_id], map: "idx_payment_account_id_recipient_id")
}

// payment_intent represents a payment intent from an account to a recipient
// this is used to track offline payments that are not processed through the API
// TODO: this is not currently used and needs some more thought
model payment_intent {
  // the unique identifier for the payment intent
  id           BigInt    @id @default(autoincrement()) @db.BigInt
  // the amount of the intent in USD cents
  amount       BigInt    @db.BigInt
  // the identifier of the chariot initiated grant for reconciliation purposes
  chariot_id   String?   @db.VarChar(255)
  // the identifier of the recipient of the payment intent
  recipient_id String    @db.Uuid
  recipient    recipient @relation(fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_payment_intent_recipient")
  // the identifier of the user that created the payment intent
  user_id      BigInt    @db.BigInt
  user         user      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_payment_intent_user")
  // the time the intent was created
  created_at   DateTime  @default(now()) @db.Timestamptz(6)

  @@index([chariot_id], map: "idx_payment_intent_chariot_id")
  @@index([recipient_id], map: "idx_payment_intent_recipient_id")
  @@index([user_id], map: "idx_payment_intent_user_id")
}

// transfer represents a transfer of funds into an account
model transfer {
  // the unique identifier for the transfer
  id                 BigInt           @id @default(autoincrement()) @db.BigInt
  // the amount of the transfer in USD cents
  amount             BigInt           @db.BigInt
  // description of the transfer
  description        String           @db.VarChar(400)
  // the destination account number
  account_number     String           @db.VarChar(255)
  // the destination routing number
  routing_number     String           @db.VarChar(255)
  // identifier of the ACH transfer
  // null until the ACH transfer is created
  ach_transfer_id    String?          @db.VarChar(255)
  // the identifier of the account that originated this transfer
  account_id         BigInt           @db.BigInt
  account            account          @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_transfer_account")
  // store a reference to the idempotency key so that we can recover an already created transfer
  // idempotency keys are not stored permanently so this gets set to NULL when a referenced key is deleted
  idempotency_key_id BigInt?          @db.BigInt
  idempotency_key    idempotency_key? @relation(fields: [idempotency_key_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_transfer_idempotency_key")
  // the identifier of the user that created the transfer
  user_id            BigInt           @db.BigInt
  user               user             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_transfer_user")
  // the time the payment was created
  created_at         DateTime         @default(now()) @db.Timestamptz(6)

  @@unique([user_id, idempotency_key_id], map: "idx_transfer_user_id_idempotency_key_id")
  @@index([idempotency_key_id], map: "idx_transfer_idempotency_key_id")
  @@index([account_id], map: "idx_transfer_account_id")
}

// Address is the physical address which can receive and send mail
model address {
  // the unique identifier for the address
  id           BigInt         @id @default(autoincrement()) @db.BigInt
  // address line 1
  line1        String         @db.VarChar(255)
  // address line 2
  line2        String?        @db.VarChar(255)
  // city
  city         String         @db.VarChar(255)
  // the 2 digit state code, e.g. CT, NY, NJ
  state        String         @db.VarChar(10)
  // the 5 digit postal code
  postalCode   String         @db.VarChar(20)
  // the status of the address
  status       address_status
  // the time the address was last updated
  updated_at   DateTime       @updatedAt @db.Timestamptz(6)
  recipient    recipient[]
  organization organization[]

  @@index([line1, line2, city, state], map: "idx_address_line1_line2_city_state")
  @@index([line1, line2, postalCode], map: "idx_address_line1_line2_postal_code")
}

// BankAddress is the address to send electronic payments
model bank_address {
  // the unique identifier for the bank address
  id                     BigInt              @id @default(autoincrement()) @db.BigInt
  // the account number of the bank account
  account_number         String              @db.VarChar(255)
  // the ABA routing number of the financial institution
  routing_number         String              @db.VarChar(255)
  // the preferred payment rail for the bank address
  preferred_payment_rail payment_rail?
  // the status of the bank address
  status                 bank_address_status
  // the time the bank address was last updated
  updated_at             DateTime            @updatedAt @db.Timestamptz(6)
  recipient              recipient[]

  @@index([routing_number, account_number], map: "idx_bank_address_routing_number_account_number")
}

enum payment_rail {
  ach
  rtp
}

enum address_status {
  active
  inactive
}

enum bank_address_status {
  active
  inactive
}
