/*
 * Chariot Payments API
 *
 * The Chariot Payments REST API.
 *
 * API version: v1
 * Contact: developers@givechariot.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strconv"

	"github.com/chariot-giving/agapay/pkg/bank"
	"github.com/chariot-giving/agapay/pkg/network"
	"github.com/gin-gonic/gin"
	"github.com/increase/increase-go"
)

// CreatePayment - Create a payment
func CreatePayment(c *gin.Context) {
	payment := new(Payment)
	if err := c.ShouldBindJSON(payment); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	electronicAccount, err := network.PayeeDB.GetPayeeElectronicAccount(payment.RecipientId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	accountNumbers, err := bank.IncreaseClient.AccountNumbers.List(c, increase.AccountNumberListParams{
		AccountID: increase.String(payment.AccountId),
		Status:    increase.F[increase.AccountNumberListParamsStatus](increase.AccountNumberListParamsStatusActive),
	})
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if len(accountNumbers.Data) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "no active account numbers found"})
		return
	}

	accountNumberId := accountNumbers.Data[0].ID

	transfer, err := bank.IncreaseClient.RealTimePaymentsTransfers.New(c, increase.RealTimePaymentsTransferNewParams{
		CreditorName:             increase.String(electronicAccount.Name),
		Amount:                   increase.Int(payment.Amount),
		RemittanceInformation:    increase.String(payment.Description),
		SourceAccountNumberID:    increase.String(accountNumberId),
		DestinationAccountNumber: increase.String(electronicAccount.AccountNumber),
		DestinationRoutingNumber: increase.String(electronicAccount.RoutingNumber),
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	payment.Id = transfer.ID
	payment.TransactionId = transfer.TransactionID
	payment.Status = string(transfer.Status)

	c.Header("Location", "/payments/"+payment.Id)
	c.JSON(http.StatusOK, payment)
}

// GetPayment - Retrieve a payment
func GetPayment(c *gin.Context) {
	id := c.Param("id")

	transfer, err := bank.IncreaseClient.RealTimePaymentsTransfers.Get(c, id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}

	// TODO: source recipient + chariot ID from database
	payment := Payment{
		Id:            transfer.ID,
		AccountId:     transfer.AccountID,
		Amount:        transfer.Amount,
		Description:   transfer.RemittanceInformation,
		TransactionId: transfer.TransactionID,
		Status:        string(transfer.Status),
		RecipientId:   "",
		ChariotId:     "",
	}

	c.JSON(http.StatusOK, &payment)
}

// ListPayments - List payments
func ListPayments(c *gin.Context) {
	limitQuery := c.DefaultQuery("limit", "100")
	limit, err := strconv.ParseInt(limitQuery, 10, 64)
	if err != nil {
		limit = 100
	}

	accountId, ok := c.GetQuery("account_id")
	if !ok {
		c.JSON(http.StatusBadRequest, gin.H{"error": "account_id is required"})
		return
	}

	listParams := increase.RealTimePaymentsTransferListParams{
		AccountID: increase.String(accountId),
		Limit:     increase.Int(limit),
	}

	cursor, ok := c.GetQuery("cursor")
	if ok {
		listParams.Cursor = increase.String(cursor)
	} else {
		listParams.Cursor = increase.Null[string]()
	}

	// TODO: filter by recipient ID in our database first
	// recipientId := c.DefaultQuery("recipient_id", "")
	response, err := bank.IncreaseClient.RealTimePaymentsTransfers.List(c, listParams)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}

	payments := make([]Payment, len(response.Data))
	for i, transfer := range response.Data {
		payments[i] = Payment{
			Id:            transfer.ID,
			AccountId:     transfer.AccountID,
			Amount:        transfer.Amount,
			Description:   transfer.RemittanceInformation,
			TransactionId: transfer.TransactionID,
			Status:        string(transfer.Status),
			RecipientId:   "",
			ChariotId:     "",
		}
	}

	paymentList := PaymentList{
		Data: payments,
		Paging: Pagination{
			Total: int32(len(response.Data)),
			Cursors: PaginationCursors{
				Before: cursor,
				After:  response.NextCursor,
			},
		},
	}

	c.JSON(http.StatusOK, &paymentList)
}
