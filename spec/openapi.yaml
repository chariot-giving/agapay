openapi: 3.0.0
info:
  title: Chariot API
  version: "v1"
  description: The Chariot REST API.
  contact:
    name: Chariot Development Team
    url: https://www.givechariot.com/contact
    email: partners@givechariot.com
  termsOfService: https://www.givechariot.com/legal-nonprofit
servers:
  - url: https://sandboxapi.givechariot.com
    description: Sandbox
  - url: https://api.givechariot.com
    description: Production
paths:
  /entities:
    get:
      summary: List entities
      description: |
        Returns a list of entities.
      operationId: listEntities
      tags:
        - Entities
      security:
        - bearerAuth: []
      parameters:
        - name: ein
          in: query
          description: The Employer Identification Number (EIN) or TaxID for the nonprofit entity.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The token to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The entities were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /entities/{id}:
    get:
      summary: Retrieve an entity.
      description: |
        Get an entity by its unique identifier.
      operationId: getAccount
      tags:
        - Entities
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the legal entity
          required: true
          schema:
            type: string
          example: "en_1LaXpKGUcADgqoEMl0Cx0Ygg"
      responses:
        "200":
          description: The entity was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /organizations:
    get:
      summary: List organizations
      description: |
        Returns a list of organizations.
      operationId: listOrganizations
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          description: The name of the organization.
          required: false
          schema:
            type: string
        - name: entity_id
          in: query
          description: The unique identifier for the entity.
          required: false
          example: "en_1LaXpKGUcADgqoEMl0Cx0Ygg"
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The token to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The entities were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /organizations/{id}:
    get:
      summary: Get nonprofit
      description: |-
        Retrieves the nonprofit organization with the given ID.
      operationId: getOrganization
      tags:
        - Organizations
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the organization
          schema:
            type: string
          required: true
          example: "org_1LaXpKGUcADgqoEMl0Cx0Ygg"
      responses:
        "200":
          description: "OK"
          headers:
            X-Request-Id:
              $ref: "#/components/headers/X-Request-Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /addresses:
    get:
      summary: List Addresses
      description: |
        Returns a list of addresses.
      operationId: listAddresses
      tags:
        - Addresses
      security:
        - bearerAuth: []
      parameters:
        - name: organization_id
          in: query
          description: The unique identifier for the organization.
          required: false
          schema:
            type: string
        - name: kind
          in: query
          description: The kind of address to filter by.
          required: false
          schema:
            type: string
            enum:
              - postal
              - us_bank_account
        - name: payment_methods
          in: query
          description: The payment methods to filter by. Comma separated list of payment method types.
          required: false
          schema:
            type: string
            example: "ach,rtp"
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The token to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The addresses were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /addresses/{id}:
    get:
      summary: Get Address
      description: |
        Retrieve an address with the given ID.
      operationId: getAddress
      tags:
        - Addresses
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the address
          required: true
          schema:
            type: string
          example: "addr_1LaXpKGUcADgqoEMl0Cx0Ygg"
      responses:
        "200":
          description: The address was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /events:
    get:
      summary: List Events
      description: |-
        List all events corresponding to your Chariot account.
      operationId: listEvents
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: The cursor to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: |
            Filter Events for those with the specified category.
          required: false
          schema:
            $ref: "#/components/schemas/EventCategory"
      responses:
        "200":
          $ref: "#/components/responses/ListEventsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /events/{id}:
    get:
      summary: Get Event
      description: |-
        Retrieve an event with the given ID.
      operationId: getEvent
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique id for the event
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /event_subscriptions:
    post:
      summary: Create an Event Subscription
      description: |-
        Create an event subscription corresponding to your Chariot account.
      operationId: createEventSubscription
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateEventSubscriptionRequest"
      responses:
        "201":
          description: Created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscription"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: List Event Subscriptions
      description: |-
        List all event subscriptions corresponding to your Chariot account.
      operationId: listEventSubscriptions
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: The cursor to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ListEventSubscriptionsResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /event_subscriptions/{id}:
    get:
      summary: Get an Event Subscription
      description: |-
        Retrieve an event subscription with the given ID.
      operationId: getEventSubscription
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the event subscription
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscription"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update an Event Subscription
      description: |-
        Update an event subscription with the given ID.
      operationId: updateEventSubscription
      tags:
        - Event Subscriptions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the event subscription
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UpdateEventSubscriptionRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventSubscription"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /files:
    post:
      summary: Create a file
      description: |
        Create & upload a file.
        To upload a file to Chariot, you'll need to send a request of Content-Type multipart/form-data.
        The request should contain the file you would like to upload, as well as the parameters for creating a file.
      operationId: uploadFile
      tags:
        - Files
      security:
        - bearerAuth: []
      requestBody:
        description: The file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - purpose
              properties:
                file:
                  description: |
                    The file contents.
                    This should follow the specifications of RFC 7578 which defines file transfers for the multipart/form-data protocol.
                  type: string
                  format: binary
                purpose:
                  type: string
                  description: |
                    What the File will be used for. We may add additional possible values for this enum over time; 
                    your application should be able to handle such additions gracefully.
                    grant_letter: A grant letter
                    tax_document: A tax document
                    other: A file purpose not covered by any of the other cases.
                  example: "grant_letter"
                  enum:
                    - grant_letter
                    - tax_document
                    - other
                description:
                  type: string
                  description: A description of the file
                  example: "Grant letter for the grant to the nonprofit"
      responses:
        "201":
          description: The file was uploaded
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: List files
      description: |
        List files.
      operationId: listFiles
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: purpose
          in: query
          description: The purpose of the file
          required: false
          schema:
            type: string
            enum:
              - grant_letter
              - tax_document
              - other
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The token to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The files were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /files/{id}:
    get:
      summary: Retrieve a file
      description: |
        Get a file by its unique identifier.
      operationId: getFile
      tags:
        - Files
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the file
          required: true
          schema:
            type: string
          example: "file_1LaXpKGUcADgqoEMl0Cx0Ygg"
      responses:
        "200":
          description: The file was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /transactions:
    post:
      summary: Create a transaction
      description: |
        This endpoint is used to send transactional data to a nonprofit organization for a payment that is sent outside of Chariot.
        Open payment networks that depend on the Federal Reserve are often very limited in terms of the data that can be sent with a payment.
        This endpoint allows you to send additional data to the organization that can be used to reconcile the payment.
      operationId: createTransaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: Idempotency-Key
          in: header
          description: |
            The unique identifier for the request.
            This header is used to ensure idempotency for requests that may be retried.
          required: false
          schema:
            type: string
      requestBody:
        description: The transaction to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      responses:
        "201":
          description: The transaction was created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: List transactions
      description: |
        List transactions.
      operationId: listTransactions
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: address_id
          in: query
          description: The unique identifier for the address
          required: false
          schema:
            type: string
        - name: organization_id
          in: query
          description: The unique identifier for the organization
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: pageToken
          in: query
          description: The page token to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The transactions were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /transactions/{id}:
    get:
      summary: Retrieve a transaction
      description: |
        Get a transaction by its unique identifier.
      operationId: getTransaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the transaction
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The transaction was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /payments:
    post:
      summary: Create a payment
      description: |
        Create a payment to send money to an organization's address.
      operationId: createPayment
      tags:
        - Payments
      security:
        - bearerAuth: []
      requestBody:
        description: The payment to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "201":
          description: The payment was created
          headers:
            Location:
              $ref: "#/components/headers/Location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
    get:
      summary: List payments
      description: |
        Returns a list of payments.
      operationId: listPayments
      tags:
        - Payments
      security:
        - bearerAuth: []
      parameters:
        - name: address_id
          in: query
          description: The unique identifier for the address
          required: true
          schema:
            type: string
          example: "addr_1LaXpKGUcADgqoEMl0Cx0Ygg"
        - name: organization_id
          in: query
          description: The unique identifier for the organization
          required: false
          schema:
            type: string
          example: "org_01j8rs605a4gctmbm58d87mvsj"
        - name: limit
          in: query
          description: Limit the size of the list that is returned. The default (and maximum) is 100 objects.
          required: false
          schema:
            type: integer
            format: int32
        - name: cursor
          in: query
          description: The cursor to use for pagination. If not set, the first page of results will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The payments were retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentList"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /payments/{id}:
    get:
      summary: Retrieve a payment
      description: |
        Get a payment by its unique identifier.
        This endpoint is used to retrieve a payment by its unique identifier.
      operationId: getPayment
      tags:
        - Payments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier for the payment
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The payment was retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/AuthenticationError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/ConflictError"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Opaque
  schemas:
    Entity:
      type: object
      description: |-
        An Entity represents a tax-exempt (as defined by the IRS) nonprofit or a fiscal sponsor for a charitable organization.
        An entity is a legal entity with a name, EIN (Federal Tax ID), officers, and a physical address.
      required:
        - id
        - name
        - ein
        - physical_address
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object.
          example: en_1LaXpKGUcADgqoEMl0Cx0Ygg
        name:
          type: string
          description: The IRS registered legal name of the nonprofit entity
          example: American Red Cross
        ein:
          type: string
          description: |-
            The US federal employer identification number (Tax ID); unique on the system.
            This value should be exactly 9 digits and should not contain any special characters such as dashes.
          example: "043567500"
        physical_address:
          $ref: "#/components/schemas/PostalAddress"
        incorporation:
          $ref: "#/components/schemas/Incorporation"
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
        officers:
          type: array
          items:
            $ref: "#/components/schemas/Person"
        status:
          type: string
          description: The status of the entity
          enum:
            - active
            - inactive
    Incorporation:
      type: object
      description: |-
        An incorporation contains details about a nonprofit's incorporation status.
      required:
        - date
        - state
        - jurisdiction
      properties:
        date:
          type: string
          format: date
          description: The date of incorporation
          example: "2021-07-11"
        state:
          type: string
          description: The 2-letter state code where the nonprofit is incorporated
          example: "CA"
        jurisdiction:
          type: string
          description: The jurisdiction where the nonprofit is incorporated
          enum:
            - federal
            - state
          example: "federal"
        incorporation_file_id:
          type: string
          description: The unique identifier for the articles of incorporation file
          example: "file_1LaXpKGUcADgqoEMl0Cx0Ygg"
        irs_tax_exempt_letter_file_id:
          type: string
          description: The unique identifier for the IRS tax exempt letter file
          example: "file_01j8ryc7cmds3e1bp5wrwvc16f"
    Person:
      type: object
      description: |-
        A person is an individual who is an officer of a nonprofit.
      required:
        - id
        - name
        - email
        - physical_address
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object.
          example: psn_1234567890
        name:
          type: string
          description: The name of the person
        title:
          type: string
          description: The title or role of the person with respect to the nonprofit entity
          example: Executive Director
        email:
          type: string
          description: The email address of the person
          example: johndoe@example.com
        physical_address:
          $ref: "#/components/schemas/PostalAddress"
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
    Organization:
      type: object
      description: |-
        An `Organization` represents an operating entity or an operating sub-organization of a parent or sponsoring entity.
        Organizations can receive payments from payers on the network.
      required:
        - id
        - name
        - entity_id
        - affiliation
        - domain
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object.
          example: org_01j8rs605a4gctmbm58d87mvsj
        name:
          type: string
          description: The registered name of the suborganization
          example: American Red Cross
        entity_id:
          type: string
          description: The unique identifier for the legal entity that this organization attributes their tax-exempt status to.
          example: en_1LaXpKGUcADgqoEMl0Cx0Ygg
        affiliation:
          type: string
          description: Indicates the organizational structure and relationship to other entities
          enum:
            - fiscal_sponsor
            - parent_organization
            - independent_nonprofit
            - sponsored_organization
          example: independent_nonprofit
        parent_organization_id:
          type: string
          description: The unique identifier of the parent organization, if this is a sponsored organization
          example: org_01j8rs605a4gctmbm58d87mvsk
        domain:
          $ref: "#/components/schemas/Domain"
        logo:
          type: string
          description: The URL of the organization's logo
        mission_statement:
          type: string
          description: The mission statement of the organization
          example: To provide relief to those in need
        ntee_code:
          type: string
          description: The NTEE code of the organization
          example: P50
        compliance:
          $ref: "#/components/schemas/Compliance"
        donation_acceptance:
          $ref: "#/components/schemas/DonationAcceptance"
        createdAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updatedAt:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
    Domain:
      type: object
      description: |-
        A domain is a unique identifier for a website or web application that is associated with an organization.
        Domains are important identity constructs that underpin the web and online interactions.
        The domain can be used as an identifier and its validity can be asserted via DNS.
      required:
        - name
      properties:
        name:
          type: string
          description: The domain name
          example: "redcross.org"
        status:
          type: string
          description: The verification status of the domain
          enum:
            - unverified
            - pending
            - verified
          example: "verified"
        verification_method:
          type: string
          description: The method used to verify the domain ownership
          enum:
            - dns_txt
            - dns_cname
            - file
          example: "dns_txt"
        verification_token:
          type: string
          description: |-
            The token used for domain verification.
            This token must be set on a DNS TXT record at the domain's DNS server.
          example: "chariot-verify=abc123xyz789"
        verified_at:
          type: string
          format: date-time
          description: The timestamp when the domain was verified
          example: "2023-04-15T14:30:00Z"
        ssl_status:
          type: string
          description: |-
            The SSL certificate status for the domain.
            This indicates if a valid SSL certificate is currently provisioned for the domain.
          enum:
            - none
            - pending
            - active
          example: "active"
        created_at:
          type: string
          format: date-time
          description: The timestamp when the domain was added to the system
          example: "2023-04-10T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: The timestamp when the domain was last updated
          example: "2023-04-15T14:30:00Z"
    Address:
      type: object
      description: |-
        An `Address` is a public-facing identifier that can be used to send payments to an `Organization`.
        An `Organization` is said to be "addressable" if it has at least one `Address`.
        An `Address` can take many forms depending on the type of payment rail used:
          * postal: a mailing address
          * bank: a bank account number and routing number
      required:
        - id
        - organization_id
        - type
        - supported_payment_methods
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the object.
          example: addr_1LaXpKGUcADgqoEMl0Cx0Ygg
        organization_id:
          type: string
          description: The unique identifier for the organization that this address is associated with.
          example: org_01j8rs605a4gctmbm58d87mvsj
        kind:
          type: string
          enum:
            - postal
            - us_bank_account
          description: The kind of the address
          example: us_bank_account
        supported_payment_methods:
          type: array
          description: List of payment methods supported by this address
          items:
            $ref: "#/components/schemas/PaymentMethod"
          example: ["ach", "rtp", "wire"]
        postal_address:
          $ref: "#/components/schemas/PostalAddress"
        us_bank_account:
          $ref: "#/components/schemas/UsBankAccountAddress"
        created_at:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was created. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        updated_at:
          type: string
          readOnly: true
          format: date-time
          description: Time when this object was last updated. Expressed in ISO 8601 format.
          example: "2021-07-11 15:34:00.000"
    PostalAddress:
      type: object
      description: |-
        A postal address is a mailing address where physical mail can be received.
        Postal addresses can be used to receive paper checks.
      required:
        - city
        - country
        - line1
        - postalCode
        - state
      properties:
        city:
          type: string
          description: City, district, suburb, town, or village.
        country:
          type: string
          description: Two-letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        line1:
          type: string
          description: Address line 1 (e.g. street, PO Box, or company name)
        line2:
          type: string
          description: Address line 2 (e.g. apartment, suite, unit, or building)
        postalCode:
          type: string
          description: ZIP or postal code
        state:
          type: string
          description: State, county, province, or region
    UsBankAccountAddress:
      type: object
      description: |-
        A US bank account is a financial account that can be used to securely receive electronic payments.
        A bank account address is usually composed of an account number and a routing number.
        The routing number is the American Bankers' Association (ABA) Routing Transit Number (RTN).
        The account number is an identifier specific to the receiving bank that uniquely identifies an account that can receive payments.
        Bank account addresses (account and routing numbers) can be used to send ACH, RTP, wire transfers, and FedNow payments.
      required:
        - account_number
        - routing_number
      properties:
        account_number:
          type: string
          description: The account number
          example: "884727222"
        routing_number:
          type: string
          description: The American Bankers' Association (ABA) Routing Transit Number (RTN).
          example: "123456789"
    EventCategory:
      type: string
      description: |
        The category of the event. This is useful for filtering events.
      enum:
        - "entity.created"
        - "entity.updated"
        - "organization.created"
        - "organization.updated"
        - "address.created"
        - "address.updated"
    Event:
      type: object
      description: |
        Events are records of things that happened to objects at Chariot.
      properties:
        id:
          type: string
          description: The unique identifier for the event
          example: "evnt_01j8rsfpswhg03ngse0pkscr3n"
          readOnly: true
        category:
          $ref: "#/components/schemas/EventCategory"
        created_at:
          type: string
          format: date-time
          description: The date and time the event was created
          example: "2024-01-19T18:48:56.37Z"
          readOnly: true
        associated_object_id:
          type: string
          description: The unique identifier for the associated object
          example: "org_01j8rs605a4gctmbm58d87mvsj"
          readOnly: true
        associated_object_type:
          type: string
          description: The type of the associated object
          example: "organization"
          readOnly: true
    EventSubscriptionStatus:
      type: string
      description: |-
        The status of the event subscription.
        This indicates if we'll send notifications to this subscription
          * active: subscription is active and events will be delivered normally
          * disabled: subscription is temporarily disabled and events will not be delivered
          * deleted: subscription has been deleted and events will not be delivered
          * requires_attention: subscription has been disabled due to delivery failures and events will not be delivered
      enum:
        - "active"
        - "disabled"
        - "deleted"
        - "requires_attention"
    EventSubscription:
      type: object
      description: |
        Webhooks are event notifications we send to you by HTTPS POST requests.
        Event Subscriptions are how you configure your application to listen for them.
      required:
        - url
      properties:
        id:
          type: string
          description: The unique identifier for the event subscription
          example: "sub_01j8rsgy0n8m75asbnsmfzyj2y"
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: The date and time the event subscription was created
          example: "2024-01-14T12:48:56.37Z"
          readOnly: true
        status:
          $ref: "#/components/schemas/EventSubscriptionStatus"
        url:
          type: string
          description: The webhook url where we'll send notifications.
          example: "https://example.com/webhook"
        category:
          $ref: "#/components/schemas/EventCategory"
    File:
      type: object
      description: |
        Files are objects that represent a file hosted on Chariot's servers.
        Files are uploaded by you (for example, when uploading a grant letter).
      required:
        - id
        - purpose
        - mime_type
        - created_at
      properties:
        id:
          type: string
          description: The unique identifier for the file
          example: "file_1LaXpKGUcADgqoEMl0Cx0Ygg"
          readOnly: true
        purpose:
          type: string
          description: |
            What the File will be used for. We may add additional possible values for this enum over time; 
            your application should be able to handle such additions gracefully.
            grant_letter: A grant letter
            tax_document: A tax document
            other: A file purpose not covered by any of the other cases.
          example: "grant_letter"
          enum:
            - grant_letter
            - tax_document
            - other
        file_name:
          type: string
          description: The name of the file
          example: "grant_letter.pdf"
        mime_type:
          type: string
          description: The MIME type of the file
          example: "application/pdf"
        download_url:
          type: string
          description: |
            A URL from where the File can be downloaded at this point in time.
            The location of this URL may change over time.
          example: "https://sandboxapi.givechariot.com/files/file_1LaXpKGUcADgqoEMl0Cx0Ygg"
          readOnly: true
        description:
          type: string
          description: A description of the file
          example: "Grant letter for the grant to the nonprofit"
        created_at:
          type: string
          format: date-time
          description: The date and time the file was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
    FileList:
      description: A list of files
      properties:
        results:
          type: array
          description: The list of files
          items:
            $ref: "#/components/schemas/File"
        paging:
          type: object
          description: The paging information
          properties:
            nextPageToken:
              type: string
              description: The token to use for pagination. If not set, the first page of results will be returned.
              example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
            total:
              type: integer
    Transaction:
      type: object
      description: |
        A transaction represents an individual line-item or donation for the receiving organization.
        There can be many transactions associated with a single payment.
      required:
        - address_id
        - amount
        - payment
      properties:
        id:
          type: string
          description: The unique identifier for the transaction
          example: "tx_1LaXpKGUcADgqoEMl0Cx0Ygg"
          readOnly: true
        address_id:
          type: string
          description: The identifier for the organization's address that will receive the transaction.
          example: "addr_1LaXpKGUcADgqoEMl0Cx0Ygg"
        amount:
          type: integer
          format: int64
          description: The transaction amount in minor currency units (cents)
          example: 10000
        currency:
          type: string
          description: The currency code for the transaction
          example: "USD"
          default: "USD"
        description:
          type: string
          description: |
            A description of the transaction.
            This description is displayed to the receiving organization.
          example: "Payment to Nonprofit"
        donation:
          $ref: "#/components/schemas/Donation"
        donors:
          type: array
          description: The list of donors for the transaction
          items:
            $ref: "#/components/schemas/Donor"
        payment_id:
          type: string
          description: |-
            The unique identifier for the payment that the transaction is associated with.
          example: "pay_1LaXpKGUcADgqoEMl0Cx0Ygg"
        payment_details:
          $ref: "#/components/schemas/PaymentDetails"
        attachment_file_id:
          type: string
          description: |-
            The unique identifier for the file that is attached to the transaction.
            This is useful if you want to attach a letter or another document to the transaction.
          example: "file_1LaXpKGUcADgqoEMl0Cx0Ygg"
        status:
          type: string
          description: The status of the transaction
          example: "pending"
          readOnly: true
          enum:
            - pending
            - submitted
            - completed
            - canceled
            - rejected
        created_at:
          type: string
          format: date-time
          description: The date and time the payment was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: The date and time the payment was last updated
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        metadata:
          type: object
          description: Additional metadata for the transaction
          additionalProperties:
            type: string
    TransactionList:
      description: A list of transactions
      properties:
        results:
          type: array
          description: The list of transactions
          items:
            $ref: "#/components/schemas/Transaction"
        paging:
          type: object
          description: The paging information
          properties:
            nextPageToken:
              type: string
              description: The token to use for pagination. If not set, the first page of results will be returned.
              example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
            total:
              type: integer
    PaymentMethod:
      type: string
      description: The method or "rails" used to make the payment
      enum:
        - "paper_check"
        - "ach"
        - "rtp"
        - "fednow"
        - "wire"
      example: "ach"
    PaymentDetails:
      type: object
      description: The payment details for the transaction
      required:
        - reference
        - payment_method
        - sent_at
      properties:
        reference:
          $ref: "#/components/schemas/PaymentReference"
        payment_method:
          $ref: "#/components/schemas/PaymentMethod"
        sent_at:
          type: string
          format: timestamp
          description: The date and time when the payment was sent
          example: "2020-07-10 15:00:00.000"
    PaymentReference:
      type: object
      description: |-
        After a payment is submitted, this object contains additional details about the payment.
        This is useful if you want to track the payment over the specific payment rails.
      properties:
        ach:
          $ref: "#/components/schemas/AchPaymentReference"
        check:
          $ref: "#/components/schemas/CheckPaymentReference"
    AchPaymentReference:
      type: object
      description: The ACH payment reference for the transaction
      properties:
        group_id:
          type: string
          description: The group ID is a unique identifier for the group of transactions that are sent together.
          example: "123456789"
        originator_company_id:
          type: string
          description: An identifier for the originating company. This is generally, but not always, a stable identifier across multiple transfers.
          example: "123456789"
        originator_company_name:
          type: string
          description: The name of the originating company.
          example: "Charitable Payer Inc."
        trace_number:
          type: string
          description: |
            A 15 digit number recorded in the Nacha file and available to both the originating and receiving bank.
            Along with the amount, date, and originating routing number, this can be used to identify the ACH transfer at either bank.
            ACH trace numbers are not unique, but are used to correlate returns.
          example: "386503938889057"
    CheckPaymentReference:
      type: object
      description: The check payment reference for the transaction
      properties:
        carrier:
          type: string
          description: The carrier for the check
          example: "USPS"
        memo:
          type: string
          description: The memo for the check
          example: "Payment to Nonprofit"
        check_number:
          type: string
          description: The check number
          example: "123456789"
    Compliance:
      type: object
      description: |-
        Compliance is an object that contains legal information about the nonprofit organization.
        This information is used to comply with regulations and ensure the legitimacy of the organization.
      properties:
        irs_subsection_code:
          type: string
          description: The IRS subsection code for the organization
          example: "03"
        irs_pub_78:
          type: boolean
          description: Whether the organization is listed on the IRS Publication 78 dataset
          example: true
        irs_revocation:
          type: boolean
          description: Whether the organization is listed on the IRS revocation dataset
          example: false
        ofac_list:
          type: boolean
          description: Whether the organization is listed on the OFAC list
          example: false
    DonationAcceptance:
      type: object
      description: |-
        Donation acceptance is an object that contains information about the donation acceptance policy and preferences of the nonprofit organization.
      properties:
        accepted_donation_types:
          type: array
          description: The list of donation types that are accepted by the organization
          items:
            $ref: "#/components/schemas/DonationType"
        preferred_payment_methods:
          type: array
          description: The list of payment methods that the organization prefers to receive donations
          items:
            $ref: "#/components/schemas/PaymentMethod"
    Donation:
      type: object
      description: |
        This is an object that allows you to specify the type of the transaction donation.
        Note that for backwards compatibility reasons, additional undocumented keys may appear in this object.
        These should be treated as deprecated and will be removed in the future.
      properties:
        type:
          $ref: "#/components/schemas/DonationType"
        donor_advised_fund_grant:
          $ref: "#/components/schemas/DonorAdvisedFundGrant"
        corporate_match:
          $ref: "#/components/schemas/CorporateMatch"
        qualified_charitable_distribution:
          $ref: "#/components/schemas/QualifiedCharitableDistribution"
    DonationType:
      type: string
      description: The type of donation
      enum:
        - donor_advised_fund_grant
        - corporate_match
        - qualified_charitable_distribution
    DonorAdvisedFundGrant:
      type: object
      description: A donor-advised fund grant is a charitable donation made by a donor-advised fund (DAF) on behalf of the donor.
      properties:
        organization_name:
          type: string
          description: The name of the DAF organization that made the grant
          example: "Vanguard Charitable"
        fund_name:
          type: string
          description: The name of the DAF fund that made the grant
          example: "John Doe Fund"
        purpose:
          type: string
          description: The purpose of the grant
          example: "General Operating Support"
        note:
          type: string
          description: A note about the grant
          example: "This grant is for the general operating support of the organization."
    CorporateMatch:
      type: object
      description: A corporate match is a charitable donation made by a corporation on behalf of an employee.
      properties:
        program_name:
          type: string
          description: The name of the corporate match program
          example: "Matching Gifts Program"
        company_name:
          type: string
          description: The name of the company that made the match
          example: "Chariot Giving, Inc."
        employee_name:
          type: string
          description: The name of the employee that requested the match
          example: "John Doe"
    QualifiedCharitableDistribution:
      type: object
      description: |-
        A qualified charitable distribution is a charitable donation made by a donor to a charitable organization through the donor's IRA.
      properties:
        account_name:
          type: string
          description: The name of the IRA account that made the distribution
          example: "John Doe's IRA"
        organization_name:
          type: string
          description: The name of the organization that made the distribution
          example: "Vanguard Charitable"
    Donor:
      type: object
      description: The donor information for the transaction
      properties:
        name:
          type: string
          description: The name of the donor
          example: "John Doe"
        email:
          type: string
          description: The email address of the donor
          example: "developers@givechariot.com"
        phone:
          type: string
          description: The phone number of the donor
          example: "415-555-1212"
        address:
          $ref: "#/components/schemas/PostalAddress"
    EntityList:
      description: A list of entities
      properties:
        results:
          type: array
          description: The list of entities
          items:
            $ref: "#/components/schemas/Entity"
        paging:
          type: object
          description: The paging information
          properties:
            nextPageToken:
              type: string
              description: The token to use for pagination. If not set, the first page of results will be returned.
              example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
            total:
              type: integer
    AddressList:
      description: A list of addresses
      properties:
        results:
          type: array
          description: The list of addresses
          items:
            $ref: "#/components/schemas/Address"
        paging:
          type: object
          description: The paging information
          properties:
            nextPageToken:
              type: string
              description: The token to use for pagination. If not set, the first page of results will be returned.
              example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
            total:
              type: integer
    OrganizationList:
      description: A list of organizations
      properties:
        results:
          type: array
          description: The list of organizations
          items:
            $ref: "#/components/schemas/Organization"
        paging:
          type: object
          description: The paging information
          properties:
            nextPageToken:
              type: string
              description: The token to use for pagination. If not set, the first page of results will be returned.
              example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
            total:
              type: integer
    Payment:
      type: object
      description: A payment moves funds to a verified organization address.
      required:
        - amount
      properties:
        id:
          type: string
          description: The unique identifier for the payment
          example: "1234567890"
          readOnly: true
        address_id:
          type: string
          description: |-
            The identifier for the address that will receive the payment.
            If not specified, the primary address for the organization will be used.
          example: "addr_1LaXpKGUcADgqoEMl0Cx0Ygg"
        amount:
          type: integer
          format: int64
          description: The payment amount in USD cents. Must be a positive amount.
          example: 10000
        description:
          type: string
          description: |
            A description of the payment that will be displayed to the receiving organization.
          example: "Payment to Nonprofit"
        status:
          type: string
          description: The status of the payment
          example: "pending"
          enum:
            - pending
            - submitted
            - completed
            - canceled
            - rejected
        created_at:
          type: string
          format: date-time
          description: The date and time the payment was created
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: The date and time the payment was last updated
          example: "2020-07-10 15:00:00.000"
          readOnly: true
        reference:
          $ref: "#/components/schemas/PaymentReference"
    PaymentList:
      description: A list of payments
      properties:
        results:
          type: array
          description: The list of payments
          items:
            $ref: "#/components/schemas/Payment"
        paging:
          type: object
          description: The paging information
          properties:
            nextPageToken:
              type: string
              description: The token to use for pagination. If not set, the first page of results will be returned.
              example: "eyJpZCI6IjEyMzQ1Njc4OTAiLCJ0aW1lc3RhbXAiOiIyMDIwLTA3LTEwIDE1OjAwOjAwLjAwMCJ9"
            total:
              type: integer
    Error:
      type: object
      required:
        - timestamp
        - code
        - error
        - message
      properties:
        timestamp:
          type: string
          description: time when the error was reported. Expressed in ISO 8601 format.
          example: "2020-07-10 15:00:00.000"
        code:
          type: number
          description: HTTP status code of the error
          example: 400
        error:
          type: string
          description: A short name of the error; usually the HTTP status.
          example: Bad Request
        message:
          type: string
          description: The description of the error
          example: Expected an API key to be provided in the header `x-chariot-api-key`
  headers:
    X-Request-Id:
      description: The unique identifier for the request
      schema:
        type: string
    Idempotency-Key:
      description: |
        The unique identifier for the request.
        This header is used to ensure idempotency for requests that may be retried.
      schema:
        type: string
    Location:
      description: The URI of the created object
      schema:
        type: string
  requestBodies:
    CreateNonprofitRequest:
      description: |-
        The request to create and register a nonprofit organization account.
        The ein and user.email properties are required.
        The user.email should be a valid contact email address for the nonprofit organization.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - ein
              - user
            properties:
              user:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    description: The email address for the nonprofit account contact
                    example: ben.give@co.com
                  phone:
                    type: string
                    description: The phone number for the nonprofit account contact
                    example: "9127772424"
                  firstName:
                    type: string
                    description: The first name of the nonprofit account contact
                    example: Ben
                  lastName:
                    type: string
                    description: The last name of the nonprofit account contact
                    example: Give
              ein:
                type: string
                description: The US federal employer identification number (Tax ID); unique on the system
                example: "043567500"
              preferredName:
                type: string
                description: |-
                  The preferred name of the nonprofit organization. This is the name that shows up on the nonprofit's dashboard and Connect modal. This is useful for nonprofits that are known by a different name to donors and don't use their IRS registered name publicly.
              picture:
                type: string
                description: The URI of the nonprofit's logo
              website:
                type: string
                description: The URL of the nonprofit's website
    CreateEventSubscriptionRequest:
      description: The request body for creating an event subscription
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - url
              - category
            properties:
              url:
                type: string
                description: The webhook url where we'll send notifications.
                example: "https://example.com/webhook"
              category:
                $ref: "#/components/schemas/EventCategory"
              signingSecret:
                type: string
                description: |-
                  The key that will be used to sign webhooks.
                  If no value is passed, a random string will be used as default.
                  This is necessary to verify that the webhook is coming from Chariot.
                  While this parameter is optional, it is highly recommended to pass a value
                  for the secret and implement webhook signature verification.
    UpdateEventSubscriptionRequest:
      description: The request body for creating an event subscription
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: |-
                  The status of the event subscription:
                    * active: The event subscription is active and events will be delivered
                    * disabled: The event subscription is temporarily disabled and events will not be delivered
                    * deleted: The event subscription is permanently deleted and events will not be delivered
                enum:
                  - "active"
                  - "disabled"
                  - "deleted"
  responses:
    ListEventsResponse:
      description: The response for Events.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call
                   to the same endpoint with the same parameters (only changing the pageToken). If
                   specified, then more results exist on the server that were not returned, otherwise
                   no more results exist on the server.
    ListEventSubscriptionsResponse:
      description: The response for Events.list
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/components/schemas/EventSubscription"
              nextPageToken:
                type: string
                description: |-
                  A cursor token to use to retrieve the next page of results by making another API call
                   to the same endpoint with the same parameters (only changing the pageToken). If
                   specified, then more results exist on the server that were not returned, otherwise
                   no more results exist on the server.
    BadRequestError:
      description: The request is invalid or contains invalid parameters
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 400
            error: "Bad Request"
            message: "Expected an API key to be provided in the header `x-chariot-api-key`"
    AuthenticationError:
      description: Unauthorized. The request is missing the security (OAuth2 Bearer token) requirements and the server is unable to verify the identify of the caller.
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 401
            error: "Unauthorized"
            message: "Unauthorized"
    ForbiddenError:
      description: Access denied
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 403
            error: "Forbidden"
            message: "User is not allowed to access this resource"
    NotFoundError:
      description: Resource Not Found
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 404
            error: "Not Found"
            message: "Resource is not found"
    ConflictError:
      description: Resource Conflicts
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 409
            error: "Conflict"
            message: "Request conflicts with an already existing resource"
    GoneError:
      description: Resource Gone or Expired
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 410
            error: "Gone"
            message: "The resource has expired"
    PreconditionFailedError:
      description: Precondition Failed
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 412
            error: "Precondition Failed"
            message: "The requested action has a failed precondition"
    InternalServerError:
      description: Internal Server Error
      headers:
        X-Request-Id:
          $ref: "#/components/headers/X-Request-Id"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            timestamp: "2020-07-10 15:00:00.000"
            code: 500
            error: "Internal server error"
            message: "The server encountered an error processing your request"

