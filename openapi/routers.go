/*
 * Chariot Payments API
 *
 * The Chariot Payments REST API.
 *
 * API version: v1
 * Contact: developers@givechariot.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/chariot-giving/agapay/pkg/auth"
	"github.com/chariot-giving/agapay/pkg/cerr"
	"github.com/chariot-giving/agapay/pkg/core"
	"github.com/chariot-giving/agapay/pkg/logger"
	"github.com/chariot-giving/agapay/pkg/telemetry"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(server *core.AgapayServer) *gin.Engine {
	router := gin.Default()
	router.NoRoute(func(c *gin.Context) {
		c.Error(cerr.NewNotFoundError("route not found", nil))
		c.Abort()
		return
	})

	// add middleware
	middlewares := []gin.HandlerFunc{
		telemetry.RequestIDMiddleware(),
		logger.LoggingMiddleware(zap.L()),
		auth.ApiKeyAuth(),
		cerr.ErrorHandler(),
	}
	router.Use(middlewares...)

	// TODO: add routes

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/",
		Index,
	},

	{
		"CreateAccount",
		http.MethodPost,
		"/accounts",
		CreateAccount,
	},

	{
		"GetAccount",
		http.MethodGet,
		"/accounts/:id",
		GetAccount,
	},

	{
		"GetAccountDetails",
		http.MethodGet,
		"/accounts/:id/details",
		GetAccountDetails,
	},

	{
		"ListAccounts",
		http.MethodGet,
		"/accounts",
		ListAccounts,
	},

	{
		"GetAccountBalances",
		http.MethodGet,
		"/accounts/:id/balances",
		GetAccountBalances,
	},

	{
		"CreatePayment",
		http.MethodPost,
		"/payments",
		CreatePayment,
	},

	{
		"GetPayment",
		http.MethodGet,
		"/payments/:id",
		GetPayment,
	},

	{
		"ListPayments",
		http.MethodGet,
		"/payments",
		ListPayments,
	},

	{
		"CreateRecipient",
		http.MethodPost,
		"/recipients",
		CreateRecipient,
	},

	{
		"GetRecipient",
		http.MethodGet,
		"/recipients/:id",
		GetRecipient,
	},

	{
		"ListRecipients",
		http.MethodGet,
		"/recipients",
		ListRecipients,
	},

	{
		"GetTransaction",
		http.MethodGet,
		"/transactions/:id",
		GetTransaction,
	},

	{
		"ListTransactions",
		http.MethodGet,
		"/transactions",
		ListTransactions,
	},

	{
		"GetTransfer",
		http.MethodGet,
		"/transfers/:id",
		GetTransfer,
	},

	{
		"ListTransfers",
		http.MethodGet,
		"/transfers",
		ListTransfers,
	},

	{
		"TransferFunds",
		http.MethodPost,
		"/transfers",
		TransferFunds,
	},
}
