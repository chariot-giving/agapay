/*
 * Chariot Payments API
 *
 * The Chariot Payments REST API.
 *
 * API version: v1
 * Contact: developers@givechariot.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strconv"

	"github.com/chariot-giving/agapay/pkg/bank"
	"github.com/chariot-giving/agapay/pkg/cerr"
	"github.com/gin-gonic/gin"
	"github.com/increase/increase-go"
)

// GetTransaction - Retrieve a transaction
func GetTransaction(c *gin.Context) {
	id := c.Param("id")

	tx, err := bank.IncreaseClient.Transactions.Get(c, id)
	if err != nil {
		c.JSON(http.StatusBadGateway, cerr.NewBadGatewayError("error retrieving transaction", err))
		return
	}

	transaction := Transaction{
		Id:          tx.ID,
		AccountId:   tx.AccountID,
		Amount:      tx.Amount,
		Description: tx.Description,
		CreatedAt:   tx.CreatedAt,
	}

	c.JSON(http.StatusOK, &transaction)
}

// ListTransactions - List transactions
func ListTransactions(c *gin.Context) {
	limitQuery := c.DefaultQuery("limit", "100")
	limit, err := strconv.ParseInt(limitQuery, 10, 64)
	if err != nil {
		limit = 100
	}

	accountId, ok := c.GetQuery("account_id")
	if !ok {
		c.JSON(http.StatusBadRequest, cerr.NewBadRequest("account_id is required", nil))
		return
	}

	listParams := increase.TransactionListParams{
		AccountID: increase.String(accountId),
		Limit:     increase.Int(limit),
	}

	cursor, ok := c.GetQuery("cursor")
	if ok {
		listParams.Cursor = increase.String(cursor)
	} else {
		listParams.Cursor = increase.Null[string]()
	}

	response, err := bank.IncreaseClient.Transactions.List(c, listParams)
	if err != nil {
		c.JSON(http.StatusBadGateway, cerr.NewBadGatewayError("error retrieving transactions", err))
		return
	}

	transactions := make([]Transaction, len(response.Data))
	for i, tx := range response.Data {
		transactions[i] = Transaction{
			Id:          tx.ID,
			AccountId:   tx.AccountID,
			Amount:      tx.Amount,
			Description: tx.Description,
			CreatedAt:   tx.CreatedAt,
		}
	}

	transactionList := TransactionList{
		Data: transactions,
		Paging: Pagination{
			Total: int32(len(response.Data)),
			Cursors: PaginationCursors{
				Before: cursor,
				After:  response.NextCursor,
			},
		},
	}

	c.JSON(http.StatusOK, &transactionList)
}
